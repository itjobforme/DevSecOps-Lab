name: Security Scans

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Run Super-Linter
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      contents: read
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0  

      - name: Run Terraform Format
        run: terraform fmt -recursive

      - name: Run Super-Linter
        uses: super-linter/super-linter@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_TERRAFORM_TERRASCAN: false
          VALIDATE_PYTHON_BLACK: false
          VALIDATE_MARKDOWN: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast:
    name: Run Semgrep SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep Auto Scan
        run: semgrep --config=auto blog-app/

      - name: Run Custom Security Rules
        run: |
          semgrep --config=.github/semgrep-rules/security-best-practices.yml
          semgrep --config=.github/semgrep-rules/terraform-security.yml

  dast:
      name: Run OWASP ZAP Scan (Optional)
      runs-on: ubuntu-latest
      continue-on-error: true  # Prevent scan failures from blocking PRs
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3
  
        - name: Create Docker Network
          run: docker network create zap-network
  
        - name: Start My DevSecOps Web App
          run: |
            docker build -t my-devsecops-blog ./blog-app
            docker run -d --network zap-network --name blog-app -p 8080:80 my-devsecops-blog
  
        - name: Wait for Web App to Start
          run: sleep 10  # Ensures app is ready
  
        - name: Run OWASP ZAP Baseline Scan (Using Host Networking)
          run: |
            docker run --rm --network host \
            -v $(pwd)/zap-reports:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t http://host.docker.internal:8080 -r zap_report.html
